import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from datetime import datetime

# Config
TP_LEVELS = np.arange(0.01, 0.07, 0.01)  # 1% to 6%
SL_LEVELS = -np.arange(0.01, 0.06, 0.01)  # -1% to -5%
SHARPE_SANITY_THRESHOLD = 10
ASSETS = [
    ('BTCUSDT', '1H'),
    ('ETHUSDT', '1H'),
    ('SOLUSDT', '1H'),
    ('BTCUSDT', '1D'),
    ('ETHUSDT', '1D'),
    ('SOLUSDT', '1D'),
    ('BNBUSDT', '1D'),
    ('ADAUSDT', '1D'),
    ('AVAXUSDT', '1D'),
    ('DOGEUSDT', '1D')
]

def run_backtest(df, tp, sl, symbol, tf):
    equity = [1]
    position = 0
    entry_price = 0
    trade_returns = []
    trades = 0
    win_trades = 0
    peak = 1
    max_dd = 0
    trade_log = []

    for i in range(1, len(df)):
        if position == 0:
            position = 1
            entry_price = df['close'].iloc[i]
            entry_time = df.index[i]
        else:
            ret = (df['close'].iloc[i] - entry_price) / entry_price
            if ret >= tp or ret <= sl:
                exit_price = df['close'].iloc[i]
                exit_time = df.index[i]

                trades += 1
                trade_returns.append(ret)
                if ret > 0:
                    win_trades += 1

                equity.append(equity[-1] * (1 + ret))
                peak = max(peak, equity[-1])
                dd = (equity[-1] - peak) / peak
                max_dd = min(max_dd, dd)

                trade_log.append({
                    "entry_time": entry_time,
                    "exit_time": exit_time,
                    "entry_price": entry_price,
                    "exit_price": exit_price,
                    "return_pct": ret,
                    "outcome": "win" if ret > 0 else "loss"
                })

                position = 0

    if len(equity) <= 1:
        return None

    series = pd.Series(equity)
    daily_returns = series.pct_change().dropna()
    mean_return = daily_returns.mean()
    std_dev = daily_returns.std()
    annualizer = np.sqrt(252)
    sharpe = (mean_return / std_dev) * annualizer if std_dev != 0 else 0
    expectancy = np.mean(trade_returns) if trade_returns else None

    if expectancy is not None and expectancy < 0:
        print(f"‚õî Negative expectancy filtered: {expectancy:.4f} (TP={tp:.2%}, SL={sl:.2%})")
        return None
    if sharpe > SHARPE_SANITY_THRESHOLD:
        print(f"üõë Unrealistic Sharpe filtered: {sharpe:.2f} (TP={tp:.2%}, SL={sl:.2%})")
        return None

    # Save equity curve
    timestamp_index = df.index[-len(equity):]
    equity_df = pd.DataFrame({
        'timestamp': timestamp_index,
        'equity': equity
    })
    equity_path = f"logs/equity_curve_momentum_{symbol.lower()}_{tf.lower()}.csv"
    equity_df.to_csv(equity_path, index=False)

    # Save trade log
    if trade_log:
        trades_df = pd.DataFrame(trade_log)
        trades_path = f"logs/momentum_trades_{symbol.lower()}_{tf.lower()}.csv"
        trades_df.to_csv(trades_path, index=False)

    return {
        'TP': tp,
        'SL': sl,
        'Sharpe Ratio': sharpe,
        'Total Return': series.iloc[-1] - 1,
        'Trades': trades,
        'Win Rate': win_trades / trades if trades > 0 else 0,
        'Expectancy': expectancy,
        'Max Drawdown': max_dd,
        'STD': std_dev,
    }

def run_grid_for_asset(symbol, tf):
    asset_tag = f"{symbol}_{tf}"
    file_path = f"data/processed/momentum_{symbol.lower()}_{tf.lower()}.csv"
    if not os.path.exists(file_path):
        print(f"‚ùå File not found: {file_path}. Skipping...")
        return

    print(f"\nüöÄ Running backtest for: {asset_tag}")
    df = pd.read_csv(file_path, parse_dates=['timestamp'])
    df.set_index('timestamp', inplace=True)
    df['returns'] = df['close'].pct_change().fillna(0)

    results = []
    for tp in TP_LEVELS:
        for sl in SL_LEVELS:
            result = run_backtest(df, tp, sl, symbol, tf)
            if result:
                results.append(result)

    if results:
        results_df = pd.DataFrame(results)
        results_df.to_csv(f'logs/momentum_{symbol.lower()}_{tf.lower()}_results.csv', index=False)
        pivot_ret = results_df.pivot(index='SL', columns='TP', values='Total Return')
        pivot_ret.to_csv(f'logs/momentum_{symbol.lower()}_{tf.lower()}_return_grid.csv')
        pivot_sharpe = results_df.pivot(index='SL', columns='TP', values='Sharpe Ratio')
        pivot_sharpe.to_csv(f'logs/momentum_{symbol.lower()}_{tf.lower()}_sharpe_grid.csv')

        print(f"‚úÖ {asset_tag} backtest complete")
        print(results_df.sort_values(by='Sharpe Ratio', ascending=False).head())

if __name__ == "__main__":
    for symbol, tf in ASSETS:
        run_grid_for_asset(symbol, tf)
